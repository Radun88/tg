const fs = require('fs');
const express = require('express');
const bodyParser = require('body-parser');
const request = require('request-promise-native'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º request-promise-native –¥–ª—è async/await
const TelegramBot = require('node-telegram-bot-api');
const FeedParser = require('feedparser');
const winston = require('winston'); // –î–æ–±–∞–≤–ª—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const axios = require('axios');

const { ClientID, AuthorizationKey } = {
  ClientID: '6799932a-b8dc-4f98-9d0a-2ab693a6a760',
  AuthorizationKey: 'Njc5OTkzMmEtYjhkYy00Zjk4LTlkMGEtMmFiNjkzYTZhNzYwOmMwNTEyMmUxLTNhNWUtNGVhZC1iMGUzLWY2ZGU2NDAzM2RkNw==',
};

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
const botToken = '7837743766:AAFhl3yw-uTbUVHKP6yo_KsjGjQnUARLxKc'; // –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram
const channelId = '-1002276106407'; // ID —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
const rssUrl = 'https://www.finam.ru/international/advanced/rsspoint/'; // URL –≤–∞—à–µ–π RSS-–ª–µ–Ω—Ç—ã
const telegramBot = new TelegramBot(botToken, { polling: true });

const app = express();
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.json(),
  transports: [
    new winston.transports.File({ filename: 'error.log', level: 'error' }),
    new winston.transports.File({ filename: 'combined.log' }),
  ],
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ RSS-–ª–µ–Ω—Ç—ã
async function getNewRssItems() {
  try {
    const body = await request(rssUrl);
    return body;
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ${error}`);
    throw error;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö RSS-—Å–æ–æ–±—â–µ–Ω–∏–π
async function processRssFeed(rssData) {
  let items = [];
  try {
    const parser = new FeedParser();
    parser.on('readable', function() {
      let item;
      while (item = this.read()) {
        items.push({
          title: item.title,
          description: item.description
        });
      }
    });
    parser.on('end', function() {
      if (items.length > 0) {
        items.forEach((item, index) => {
          setTimeout(() => {
            telegramBot.sendMessage(channelId, `üì∞ –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${item.title}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${item.description}`);
          }, 1000 * index); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        });
      }
    });
    parser.end(rssData);
  } catch (err) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ RSS: ${err}`);
    throw err;
  }
  
  return items;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ RSS
app.post('/rss', async (req, res) => {
  try {
    const rssData = await getNewRssItems();
    await processRssFeed(rssData);
    res.sendStatus(200);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: ${error}`);
    res.sendStatus(500);
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(process.env.PORT || 3000, () => {
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000...');
  logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000...');
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ø–æ–º–æ—â—å—é GigaChat
const fetchResponse = async (url) => {
  try {
    const response = await axios.get(url);
    return response.data;
  } catch (error) {
    console.error('Error fetching data from GigaChat API: ', error);
    return {};
  }
};

const generateRequestURL = ({ text }) => {
  const baseURL = 'https://gigachore.com/chats/v1/messages';
  const params = { client_id: ClientID, auth_key: AuthorizationKey };
  return `${baseURL}?${new URLSearchParams(params).toString()}&&text=${encodeURIComponent(text)}`;
};

const analyzeNews = async (news) => {
  const newsText = `${news.title}\n${news.description}`;
  const gigaChatResponse = await fetchResponse(generateRequestURL({ text: newsText }));
  const processedNews = postProcessing(gigaChatResponse);
  return processedNews;
};

const sendToGroup = async (message) => {
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
  console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É: ${message}`);
};

const main = async () => {
  const rssData = await getNewRssItems();
  const items = await processRssFeed(rssData);
  const analyzedNews = await Promise.all(items.map(analyzeNews));
  const finalMessages = analyzedNews.map(news => `üì∞ –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${news.title}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${news.description}`);
  await Promise.all(finalMessages.map(sendToGroup));
};

main().catch(error => console.error('–û—à–∏–±–∫–∞: ', error));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
const initialRssUpdate = async () => {
  try {
    const rssData = await getNewRssItems();
    const items = await processRssFeed(rssData);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ RSS: ${error}`);
  }
};

// –ü–µ—Ä–≤–∏—á–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
initialRssUpdate();
